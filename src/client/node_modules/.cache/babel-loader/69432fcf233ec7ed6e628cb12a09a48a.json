{"ast":null,"code":"import { GAME_STATUS, ROOM_JOINTED, LEAVE_ROOM, NEXT_TICK, NEXT_PIECE, LOOSE, STRAFE_LEFT, STRAFE_RIGHT } from '../actions/game';\nconst game = {\n  id: null,\n  admin: null,\n  players: [],\n  pieces: [],\n  spectators: [],\n  tick: 0\n};\n\nconst reducer = (state = game, action) => {\n  let players, id_player;\n\n  switch (action.type) {\n    case GAME_STATUS:\n      return { ...state,\n        ...action.payload\n      };\n\n    case LOOSE:\n      players = state.players.map(player => {\n        if (player.id === action.payload.userid) {\n          return { ...player,\n            loose: true\n          };\n        }\n\n        return { ...player\n        };\n      });\n      return { ...state,\n        players\n      };\n\n    case ROOM_JOINTED:\n      return { ...state,\n        id: action.payload.id,\n        admin: action.payload.admin,\n        players: action.payload.players,\n        spectators: action.payload.spectators,\n        gameHasStarted: action.payload.gameHasStarted,\n        rules: action.payload.rules\n      };\n\n    case LEAVE_ROOM:\n      return game;\n\n    case NEXT_TICK:\n      return { ...state,\n        tick: action.payload.tick,\n        players: action.payload.players\n      };\n\n    case NEXT_PIECE:\n      players = state.players.map(player => ({ ...player,\n        pieces: [...player.pieces, action.payload]\n      }));\n      return { ...state,\n        players,\n        pieces: [...state.pieces, action.payload]\n      };\n\n    case STRAFE_LEFT:\n      id_player = action.payload.id_player;\n      return { ...state,\n        players: state.players.map((player, id) => {\n          if (id !== id_player) {\n            return { ...player\n            };\n          }\n\n          return { ...player,\n            pieces: player.pieces.map((piece, indexPiece) => {\n              if (indexPiece !== 0) {\n                return { ...piece\n                };\n              }\n\n              return { ...piece,\n                x: piece.x - 1\n              };\n            })\n          };\n        })\n      };\n\n    case STRAFE_RIGHT:\n      id_player = action.payload.id_player;\n      return { ...state,\n        players: state.players.map((player, id) => {\n          if (id !== id_player) {\n            return { ...player\n            };\n          }\n\n          return { ...player,\n            pieces: player.pieces.map((piece, indexPiece) => {\n              if (indexPiece !== 0) {\n                return { ...piece\n                };\n              }\n\n              return { ...piece,\n                x: piece.x + 1\n              };\n            })\n          };\n        })\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/c141/cursus/red_tetris/src/client/src/reducers/game.js"],"names":["GAME_STATUS","ROOM_JOINTED","LEAVE_ROOM","NEXT_TICK","NEXT_PIECE","LOOSE","STRAFE_LEFT","STRAFE_RIGHT","game","id","admin","players","pieces","spectators","tick","reducer","state","action","id_player","type","payload","map","player","userid","loose","gameHasStarted","rules","piece","indexPiece","x"],"mappings":"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","sourcesContent":["import {\n  GAME_STATUS,\n  ROOM_JOINTED,\n  LEAVE_ROOM,\n  NEXT_TICK,\n  NEXT_PIECE,\n  LOOSE,\n  STRAFE_LEFT,\n  STRAFE_RIGHT,\n} from '../actions/game'\n\nconst game = {\n  id: null,\n  admin: null,\n  players: [],\n  pieces: [],\n  spectators: [],\n  tick: 0,\n};\n\nconst reducer = (state = game, action) => {\n  let players, id_player;\n\n  switch (action.type) {\n\n  case GAME_STATUS:\n    return {\n      ...state,\n      ...action.payload,\n    }\n\n  case LOOSE:\n    players = state.players.map((player) => {\n      if (player.id === action.payload.userid) { return { ...player, loose: true } }\n      return { ...player }\n    });\n\n    return {\n      ...state,\n      players,\n    }\n\n  case ROOM_JOINTED:\n    return {\n      ...state,\n      id: action.payload.id,\n      admin: action.payload.admin,\n      players: action.payload.players,\n      spectators: action.payload.spectators,\n      gameHasStarted: action.payload.gameHasStarted,\n      rules: action.payload.rules,\n    };\n\n  case LEAVE_ROOM:\n    return game;\n\n  case NEXT_TICK:\n    return {\n      ...state,\n      tick: action.payload.tick,\n      players: action.payload.players,\n    };\n\n  case NEXT_PIECE:\n    players = state.players.map((player) => ({\n      ...player,\n      pieces: [\n        ...player.pieces,\n        action.payload,\n      ],\n    }));\n\n    return {\n      ...state,\n      players,\n      pieces: [\n        ...state.pieces,\n        action.payload,\n      ],\n    };\n\n  case STRAFE_LEFT:\n    id_player = action.payload.id_player;\n    return {\n      ...state,\n      players: state.players.map((player, id) => {\n        if (id !== id_player) { return { ...player } }\n        return {\n          ...player,\n          pieces: player.pieces.map((piece, indexPiece) => {\n            if (indexPiece !== 0) { return { ...piece } }\n            return {\n              ...piece,\n              x: piece.x - 1,\n            }\n          }),\n        }\n      }),\n    };\n\n  case STRAFE_RIGHT:\n    id_player = action.payload.id_player;\n    return {\n      ...state,\n      players: state.players.map((player, id) => {\n        if (id !== id_player) { return { ...player } }\n        return {\n          ...player,\n          pieces: player.pieces.map((piece, indexPiece) => {\n            if (indexPiece !== 0) { return { ...piece } }\n            return {\n              ...piece,\n              x: piece.x + 1,\n            }\n          }),\n        }\n      }),\n    };\n  default:\n    return state\n  }\n}\n\nexport default reducer\n\n"]},"metadata":{},"sourceType":"module"}