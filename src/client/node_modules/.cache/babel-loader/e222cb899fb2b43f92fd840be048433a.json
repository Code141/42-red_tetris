{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/c141/cursus/red_tetris/src/client/src/components/board.js\";\nimport React from 'react';\n\nconst Line = ({\n  cells,\n  y\n}) => /*#__PURE__*/_jsxDEV(\"ul\", {\n  className: \"line\",\n  children: cells.map((cell, x) => /*#__PURE__*/_jsxDEV(\"li\", {\n    className: `cell c${cell}`,\n    children: cell\n  }, x, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 3\n}, this);\n\n_c = Line;\n\nconst Board = ({\n  player,\n  game\n}) => {\n  const board = player.board;\n  const piece = player.pieces[0];\n  const buffer = game.rules.pieces[game.pieces[player.nbPiecesLanded].id];\n  const b2 = board.buffer.map((line, y) => line.map((cell, x) => {\n    const relx = x - piece.x;\n    const rely = y - piece.y;\n\n    if (buffer[rely] === undefined || buffer[rely][relx] === undefined || buffer[rely][relx] === 0) {\n      return cell;\n    }\n\n    return buffer[rely][relx];\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `board ${player.loose ? 'loose' : ''}`,\n    children: [player.loose ? 'You Loose' : '', \"ID \", player.id, \"USERNAME \", player.username, \"SCORE \", player.score, b2.map((line, index) => /*#__PURE__*/_jsxDEV(Line, {\n      cells: line,\n      y: index\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Board;\nexport default Board;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Line\");\n$RefreshReg$(_c2, \"Board\");","map":{"version":3,"sources":["/home/c141/cursus/red_tetris/src/client/src/components/board.js"],"names":["React","Line","cells","y","map","cell","x","Board","player","game","board","piece","pieces","buffer","rules","nbPiecesLanded","id","b2","line","relx","rely","undefined","loose","username","score","index"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,kBACX;AAAI,EAAA,SAAS,EAAC,MAAd;AAAA,YAEID,KAAK,CAACE,GAAN,CAAU,CAACC,IAAD,EAAOC,CAAP,kBACR;AAAI,IAAA,SAAS,EAAG,SAAQD,IAAK,EAA7B;AAAA,cACIA;AADJ,KAAqCC,CAArC;AAAA;AAAA;AAAA;AAAA,UADF;AAFJ;AAAA;AAAA;AAAA;AAAA,QADF;;KAAML,I;;AAaN,MAAMM,KAAK,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAAsB;AAClC,QAAMC,KAAK,GAAGF,MAAM,CAACE,KAArB;AAEA,QAAMC,KAAK,GAAGH,MAAM,CAACI,MAAP,CAAc,CAAd,CAAd;AACA,QAAMC,MAAM,GAAGJ,IAAI,CAACK,KAAL,CAAWF,MAAX,CAAkBH,IAAI,CAACG,MAAL,CAAYJ,MAAM,CAACO,cAAnB,EAAmCC,EAArD,CAAf;AAEA,QAAMC,EAAE,GAAGP,KAAK,CAACG,MAAN,CAAaT,GAAb,CAAiB,CAACc,IAAD,EAAOf,CAAP,KAAae,IAAI,CAACd,GAAL,CAAS,CAACC,IAAD,EAAOC,CAAP,KAAa;AAC7D,UAAMa,IAAI,GAAGb,CAAC,GAAGK,KAAK,CAACL,CAAvB;AACA,UAAMc,IAAI,GAAGjB,CAAC,GAAGQ,KAAK,CAACR,CAAvB;;AACA,QAAIU,MAAM,CAACO,IAAD,CAAN,KAAiBC,SAAjB,IACFR,MAAM,CAACO,IAAD,CAAN,CAAaD,IAAb,MAAuBE,SADrB,IAEFR,MAAM,CAACO,IAAD,CAAN,CAAaD,IAAb,MAAuB,CAFzB,EAGE;AACA,aAAOd,IAAP;AACD;;AACD,WAAQQ,MAAM,CAACO,IAAD,CAAN,CAAaD,IAAb,CAAR;AACD,GAVwC,CAA9B,CAAX;AAYA,sBACE;AAAK,IAAA,SAAS,EAAG,SAASX,MAAM,CAACc,KAAR,GAAiB,OAAjB,GAA2B,EAAG,EAAvD;AAAA,eACId,MAAM,CAACc,KAAR,GAAiB,WAAjB,GAA+B,EADlC,SAEId,MAAM,CAACQ,EAFX,eAGUR,MAAM,CAACe,QAHjB,YAIOf,MAAM,CAACgB,KAJd,EAMIP,EAAE,CAACb,GAAH,CAAO,CAACc,IAAD,EAAOO,KAAP,kBACL,QAAC,IAAD;AACE,MAAA,KAAK,EAAEP,IADT;AAGE,MAAA,CAAC,EAAEO;AAHL,OAEOA,KAFP;AAAA;AAAA;AAAA;AAAA,YADF,CANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAnCD;;MAAMlB,K;AAqCN,eAAeA,KAAf","sourcesContent":["import React from 'react'\n\nconst Line = ({ cells, y }) => (\n  <ul className='line'>\n    {\n      cells.map((cell, x) => (\n        <li className={`cell c${cell}`} key={x}>\n          { cell }\n        </li>\n      )\n      )\n    }\n  </ul>\n)\n\nconst Board = ({ player, game }) => {\n  const board = player.board;\n\n  const piece = player.pieces[0];\n  const buffer = game.rules.pieces[game.pieces[player.nbPiecesLanded].id];\n\n  const b2 = board.buffer.map((line, y) => line.map((cell, x) => {\n    const relx = x - piece.x;\n    const rely = y - piece.y;\n    if (buffer[rely] === undefined ||\n      buffer[rely][relx] === undefined ||\n      buffer[rely][relx] === 0\n    ) {\n      return cell;\n    }\n    return (buffer[rely][relx]);\n  }));\n\n  return (\n    <div className={`board ${(player.loose) ? 'loose' : ''}`} >\n      {(player.loose) ? 'You Loose' : ''}\n    ID {player.id}\n    USERNAME {player.username}\n    SCORE {player.score}\n      {\n        b2.map((line, index) =>\n          <Line\n            cells={line}\n            key={index}\n            y={index}\n          />\n        )\n      }\n    </div>\n  )\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}