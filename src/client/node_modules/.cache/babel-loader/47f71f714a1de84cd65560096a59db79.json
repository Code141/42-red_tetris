{"ast":null,"code":"import io from 'socket.io-client';\n\nconst Socket = url => store => {\n  const socket = io(url);\n  socket.on('connect', () => {\n    console.log('CONNECTED');\n    socket.send('hello');\n    store.dispatch({\n      type: 'SET_SOCKET_CONNECTED',\n      payload: true\n    });\n  });\n  socket.on('connected', data => {\n    console.log(data);\n  });\n  socket.on('disconnect', reason => {\n    console.log('DISCONNECTED');\n    console.log(reason);\n  });\n  socket.on('reconnect_attempt', attemptNumber => {\n    console.log('RECONNECT ATTEMPT');\n    console.log(attemptNumber);\n  });\n  socket.on('reconnect_error', error => {\n    console.log('RECONNECT ERROR');\n    console.log(error);\n  });\n  socket.on('action', action => {\n    store.dispatch(action);\n  });\n  socket.on('fact', action => {\n    store.dispatch(action);\n  });\n  return next => action => {\n    /*\n    'ROOM_CREATED'\n    'ROOM_JOINTED'\n    'ROOM_LEAVED'\n    'ROOM_LIST',\n    'GAME_STARTED',\n    'NEXT_TICK'\n    */\n    switch (action.type) {\n      case 'CREATE_ROOM':\n      case 'JOINT_ROOM':\n      case 'LEAVE_ROOM':\n      case 'GET_ROOM_LIST':\n      case 'START_GAME':\n        socket.emit('action', action);\n        break;\n\n      case 'MOVE':\n        socket.emit('move', action);\n        break;\n\n      default:\n        return next(action);\n    }\n  };\n};\n\nexport default Socket;","map":{"version":3,"sources":["/home/c141/cursus/red_tetris/src/client/src/middleware/socket.js"],"names":["io","Socket","url","store","socket","on","console","log","send","dispatch","type","payload","data","reason","attemptNumber","error","action","next","emit"],"mappings":"AAAA,OAAOA,EAAP,MAAe,kBAAf;;AAEA,MAAMC,MAAM,GAAIC,GAAD,IAASC,KAAK,IAAI;AAE/B,QAAMC,MAAM,GAAGJ,EAAE,CAACE,GAAD,CAAjB;AAEAE,EAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAH,IAAAA,MAAM,CAACI,IAAP,CAAY,OAAZ;AACAL,IAAAA,KAAK,CAACM,QAAN,CAAe;AACbC,MAAAA,IAAI,EAAE,sBADO;AAEbC,MAAAA,OAAO,EAAE;AAFI,KAAf;AAID,GAPD;AASAP,EAAAA,MAAM,CAACC,EAAP,CAAU,WAAV,EAAwBO,IAAD,IAAU;AAC/BN,IAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;AACD,GAFD;AAIAR,EAAAA,MAAM,CAACC,EAAP,CAAU,YAAV,EAAyBQ,MAAD,IAAY;AAClCP,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYM,MAAZ;AACD,GAHD;AAKAT,EAAAA,MAAM,CAACC,EAAP,CAAU,mBAAV,EAAgCS,aAAD,IAAmB;AAChDR,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYO,aAAZ;AACD,GAHD;AAKAV,EAAAA,MAAM,CAACC,EAAP,CAAU,iBAAV,EAA8BU,KAAD,IAAW;AACtCT,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACD,GAHD;AAKAX,EAAAA,MAAM,CAACC,EAAP,CAAU,QAAV,EAAqBW,MAAD,IAAY;AAC9Bb,IAAAA,KAAK,CAACM,QAAN,CAAeO,MAAf;AACD,GAFD;AAIAZ,EAAAA,MAAM,CAACC,EAAP,CAAU,MAAV,EAAmBW,MAAD,IAAY;AAC5Bb,IAAAA,KAAK,CAACM,QAAN,CAAeO,MAAf;AACD,GAFD;AAIA,SAAOC,IAAI,IAAID,MAAM,IAAI;AAEvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AAEI,YAAQA,MAAM,CAACN,IAAf;AAEA,WAAK,aAAL;AACA,WAAK,YAAL;AACA,WAAK,YAAL;AACA,WAAK,eAAL;AACA,WAAK,YAAL;AACEN,QAAAA,MAAM,CAACc,IAAP,CAAY,QAAZ,EAAsBF,MAAtB;AACA;;AAEF,WAAK,MAAL;AACEZ,QAAAA,MAAM,CAACc,IAAP,CAAY,MAAZ,EAAoBF,MAApB;AACA;;AAEF;AACE,eAAOC,IAAI,CAACD,MAAD,CAAX;AAfF;AAiBD,GA5BD;AA6BD,CArED;;AAuEA,eAAef,MAAf","sourcesContent":["import io from 'socket.io-client';\n\nconst Socket = (url) => store => {\n\n  const socket = io(url);\n\n  socket.on('connect', () => {\n    console.log('CONNECTED');\n    socket.send('hello')\n    store.dispatch({\n      type: 'SET_SOCKET_CONNECTED',\n      payload: true,\n    });\n  });\n\n  socket.on('connected', (data) => {\n    console.log(data);\n  });\n\n  socket.on('disconnect', (reason) => {\n    console.log('DISCONNECTED');\n    console.log(reason);\n  });\n\n  socket.on('reconnect_attempt', (attemptNumber) => {\n    console.log('RECONNECT ATTEMPT');\n    console.log(attemptNumber);\n  });\n\n  socket.on('reconnect_error', (error) => {\n    console.log('RECONNECT ERROR');\n    console.log(error);\n  });\n\n  socket.on('action', (action) => {\n    store.dispatch(action);\n  });\n\n  socket.on('fact', (action) => {\n    store.dispatch(action);\n  });\n\n  return next => action => {\n\n    /*\n    'ROOM_CREATED'\n    'ROOM_JOINTED'\n    'ROOM_LEAVED'\n    'ROOM_LIST',\n    'GAME_STARTED',\n    'NEXT_TICK'\n    */\n\n    switch (action.type) {\n\n    case 'CREATE_ROOM':\n    case 'JOINT_ROOM':\n    case 'LEAVE_ROOM':\n    case 'GET_ROOM_LIST':\n    case 'START_GAME':\n      socket.emit('action', action);\n      break;\n\n    case 'MOVE':\n      socket.emit('move', action);\n      break;\n\n    default:\n      return next(action);\n    }\n  }\n}\n\nexport default Socket;\n"]},"metadata":{},"sourceType":"module"}